name: Publish to GitHub Pages PyPI Index

on:
  release:
    types: [published] # This workflow runs when a new GitHub Release is published
  workflow_dispatch: # Allows manual triggering from GitHub Actions tab

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for actions/checkout and git push

    steps:
      - name: Checkout Package Repository
        uses: actions/checkout@v4
        with:
          # Ensure full history is fetched for build tools if needed
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Use a specific Python version, e.g., '3.10'

      - name: Install build tools
        run: |
          pip install build twine wheel toml

      - name: Build sdist and wheel
        run: |
          python -m build
        # The built packages will be in the 'dist/' directory of the package repo

      - name: Checkout PyPI Index Repository
        uses: actions/checkout@v4
        with:
          repository: tugapse/python-index 
          path: my-python-index-repo # Local path to clone the index repo
          token: ${{ secrets.GH_PAT_INDEX_REPO }} # Use the PAT secret

      - name: Copy Package Distributions to Index Repo
        run: |
          PACKAGE_NAME=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['name'].lower().replace('_', '-'))")
          export PACKAGE_NAME
          mkdir -p my-python-index-repo/$PACKAGE_NAME
          cp dist/* my-python-index-repo/$PACKAGE_NAME/

      - name: Update PyPI Index HTML Files
        run: |
          pip install beautifulsoup4
          cd my-python-index-repo
          python - <<EOF
          import os
          import hashlib
          from bs4 import BeautifulSoup
          import sys

          PACKAGE_NAME = os.environ.get("PACKAGE_NAME")
          if not PACKAGE_NAME:
              print("PACKAGE_NAME environment variable is not set.")
              sys.exit(1)
          package_dir = PACKAGE_NAME
          package_index_path = os.path.join(package_dir, "index.html")

          # Create a basic HTML structure for the package's index.html
          html_content = f"""
          <!DOCTYPE html>
          <html>
          <head>
              <title>Links for {package_dir}</title>
          </head>
          <body>
              <h1>Links for {package_dir}</h1>
          </body>
          </html>
          """
          soup = BeautifulSoup(html_content, 'html.parser')
          body = soup.find('body')

          # Add/update links for each distribution file
          for filename in sorted(os.listdir(package_dir)):
              if filename.endswith(('.whl', '.tar.gz')):
                  filepath = os.path.join(package_dir, filename)
                  with open(filepath, 'rb') as f:
                      sha256_hash = hashlib.sha256(f.read()).hexdigest()

                  link = soup.new_tag("a", href=f"{filename}#sha256={sha256_hash}")
                  link.string = filename
                  body.append(link)
                  body.append(soup.new_tag("br"))

          with open(package_index_path, "w") as f:
              f.write(str(soup))

          # --- Update the root index.html ---
          root_index_path = "index.html"
          if os.path.exists(root_index_path):
              with open(root_index_path, "r") as f:
                  root_soup = BeautifulSoup(f, 'html.parser')
          else:
              root_soup = BeautifulSoup("<!DOCTYPE html><html><head><title>Simple Index</title></head><body><h1>Simple Index</h1></body></html>", 'html.parser')

          root_body = root_soup.find('body')

          # Check if link already exists
          existing_link = root_body.find('a', href=f"{package_dir}/")
          if not existing_link:
              link_tag = root_soup.new_tag("a", href=f"{package_dir}/")
              link_tag.string = package_dir
              root_body.append(link_tag)
              root_body.append(root_soup.new_tag("br"))
              with open(root_index_path, "w") as f:
                  f.write(str(root_soup))
          EOF

      - name: Configure Git for committing
        run: |
          cd my-python-index-repo
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add .
          git commit -m "Auto-update PyPI index for ${{ github.event.repository.name }} v${{ github.event.release.tag_name || 'latest' }} [skip ci]" || echo "No changes to commit"
          git push